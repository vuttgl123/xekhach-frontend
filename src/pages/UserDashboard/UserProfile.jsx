import { useState, useEffect } from "react";
import { FaUser, FaPhone, FaCalendarAlt, FaMapMarkerAlt } from "react-icons/fa";
import { fetchUserProfile, updateUserProfile } from "../../components/api/authApi"; // Import API
import { showSuccessAlert } from "../../components/message/SuccessAlert"; // Th√¥ng b√°o th√†nh c√¥ng
import { showErrorAlert } from "../../components/message/ErrorAlert"; // Th√¥ng b√°o th·∫•t b·∫°i
import styles from "./userprofile.module.css";

const UserProfile = () => {
    const [userData, setUserData] = useState({
        fullName: "",
        phoneNumber: "",
        birthDate: "",
        gender: "",
        address: "",
    });

    const [editMode, setEditMode] = useState(false);
    const [errors, setErrors] = useState({}); // L∆∞u l·ªói hi·ªÉn th·ªã d∆∞·ªõi input

    // üöÄ L·∫•y th√¥ng tin user t·ª´ API khi component mount
    useEffect(() => {
        fetchUserProfile().then((data) => {
            if (data) setUserData(data);
        });
    }, []);

    // üöÄ H√†m x·ª≠ l√Ω thay ƒë·ªïi input
    const handleChange = (e) => {
        const { name, value } = e.target;
        setUserData({ ...userData, [name]: value });
    };

    // üöÄ Ki·ªÉm tra l·ªói tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const validateForm = () => {
        let newErrors = {};

        if (!userData.fullName.trim()) {
            newErrors.fullName = "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
        } else if (userData.fullName.length > 255) {
            newErrors.fullName = "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±";
        }

        if (!userData.birthDate) {
            newErrors.birthDate = "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
        }

        if (!["Nam", "N·ªØ", "Kh√°c"].includes(userData.gender)) {
            newErrors.gender = "Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá";
        }

        if (userData.address.length > 500) {
            newErrors.address = "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 500 k√Ω t·ª±";
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // üöÄ G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t l√™n API
    const handleSave = async () => {
        if (!validateForm()) {
            showErrorAlert("C√≥ l·ªói x·∫£y ra! Vui l√≤ng ki·ªÉm tra l·∫°i.");
            return;
        }

        try {
            const updatedData = await updateUserProfile(userData);
            if (updatedData) {
                showSuccessAlert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
                setEditMode(false);
            } else {
                throw new Error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin!");
            }
        } catch (error) {
            showErrorAlert("C·∫≠p nh·∫≠t th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };

    return (
        <div className={styles.profileContainer}>
            <h2>Th√¥ng Tin C√° Nh√¢n</h2>
            <form className={styles.userProfileForm}>
                {/* H·ªç v√† t√™n */}
                <label className={styles.labelstyle}>H·ªç v√† t√™n *</label>
                <div className={styles.inputGroup}>
                    <FaUser />
                    <input
                        type="text"
                        name="fullName"
                        value={userData.fullName}
                        onChange={handleChange}
                        disabled={!editMode}
                    />
                </div>
                {errors.fullName && <p className={styles.errorMessage}>{errors.fullName}</p>}

                {/* S·ªë ƒëi·ªán tho·∫°i (Kh√¥ng cho ph√©p ch·ªânh s·ª≠a) */}
                <label className={styles.labelstyle}>S·ªë ƒëi·ªán tho·∫°i</label>
                <div className={styles.inputGroup}>
                    <FaPhone />
                    <input type="text" name="phoneNumber" value={userData.phoneNumber} disabled />
                </div>

                {/* Ng√†y sinh */}
                <label className={styles.labelstyle}>Ng√†y sinh</label>
                <div className={styles.inputGroup}>
                    <FaCalendarAlt />
                    <input
                        type="date"
                        name="birthDate"
                        value={userData.birthDate || ""}
                        onChange={handleChange}
                        disabled={!editMode}
                    />
                </div>
                {errors.birthDate && <p className={styles.errorMessage}>{errors.birthDate}</p>}

                {/* Gi·ªõi t√≠nh */}
                <label className={styles.labelstyle}>Gi·ªõi t√≠nh</label>
                <div className={styles.genderContainer}>
                    {["Nam", "N·ªØ", "Kh√°c"].map((option) => (
                        <button
                            key={option}
                            type="button"
                            className={userData.gender === option ? styles.active : ""}
                            onClick={() => editMode && setUserData({ ...userData, gender: option })}
                        >
                            {option}
                        </button>
                    ))}
                </div>
                {errors.gender && <p className={styles.errorMessage}>{errors.gender}</p>}

                {/* ƒê·ªãa ch·ªâ */}
                <label className={styles.labelstyle}>ƒê·ªãa ch·ªâ</label>
                <div className={`${styles.inputGroup} ${styles.inputGroupFull}`}>
                    <FaMapMarkerAlt />
                    <input
                        type="text"
                        name="address"
                        value={userData.address}
                        onChange={handleChange}
                        disabled={!editMode}
                    />
                </div>
                {errors.address && <p className={styles.errorMessage}>{errors.address}</p>}

                {/* N√∫t Ch·ªânh s·ª≠a & L∆∞u */}
                <button
                    type="button"
                    className={styles.saveButton}
                    onClick={() => {
                        if (editMode) {
                            handleSave();
                        } else {
                            setEditMode(true);
                        }
                    }}
                >
                    {editMode ? "L∆∞u" : "Ch·ªânh s·ª≠a"}
                </button>
            </form>
        </div>
    );
};

export default UserProfile;
